generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  BASIC
  PRO
  BUSINESS
}

enum Role {
  USER
  ADMIN
}

enum Category {
  NATURE
  PORTRAIT
  CITYSCAPE
  ABSTRACT
  OTHER
}

enum PostType {
  BLOG
  FORUM
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique // Autentisering via Clerk
  email     String   @unique
  name      String?
  password  String?
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  folders       Folder[]
  images        Image[]
  galleries     Gallery[]
  comments      Comment[]
  likes         Like[]
  subscriptions Subscription?
  posts         Post[]
  forumThreads  ForumThread[]
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan     @default(FREE)
  stripeId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    Category @default(OTHER)
  coverImage  String?  // Huvudbild för UI
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images Image[]
}

model Image {
  id          String   @id @default(uuid())
  url         String
  title       String?
  description String?
  category    Category @default(OTHER)
  isPublic    Boolean  @default(true)
  folderId    String?  // Koppling till folder
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  userId      String   // Ägaren av bilden
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  comments  Comment[]
  likes     Like[]
  tags      Tag[]
  galleries Gallery[] @relation("GalleryImages")
}

model Gallery {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  images Image[] @relation("GalleryImages")
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  quoteId   String?  // Om det är en kommentar som citerar en annan kommentar
  quote     Comment? @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  Comment Comment[] @relation("QuoteRelation")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId   String?
  image     Image?    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, imageId, postId]) // En användare kan bara gilla en bild eller ett inlägg en gång
}

model Tag {
  id      String @id @default(uuid())
  name    String
  imageId String
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([name, imageId])
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  type      PostType @default(BLOG)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  comments  Comment[]
  likes     Like[]
}

model ForumCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  description String?
  createdAt DateTime @default(now())

  threads ForumThread[]
}

model ForumThread {
  id          String   @id @default(uuid())
  title       String
  content     String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  comments ForumComment[]
  likes    ForumLike[]
}

model ForumComment {
  id         String   @id @default(uuid())
  text       String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId   String
  thread     ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  quoteId    String? // Om detta är ett citat av en annan kommentar
  quote      ForumComment? @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  likes ForumLike[]
}

model ForumLike {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId  String?
  thread    ForumThread? @relation(fields: [threadId], references: [id], onDelete: Cascade)
  commentId String?
  comment   ForumComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, threadId, commentId]) // En användare kan bara gilla en gång per inlägg/kommentar
}